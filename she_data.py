# -*- coding: utf-8 -*-
"""SHE Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PYioKXdl45EoL-OzWCQ201QBXTx9dkeU
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd 
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from wordcloud import WordCloud

"""### Dataset Information

Dataset berisikan temuan-temuan positif dan negatif di perusahaan 'X' tahun 2019-2020

## DATA KNOWLEDGE
"""

#read data
df = pd.read_csv('data_2019_2020.csv')

df.head(100)

df.info()

"""berdasarkan data info di atas dapat disimpulkan bahwa :
1. banyak features yang null yaitu feature `Catatan Verifikasi`,`Catatan Pelapor`, 
 `Catatan PIC`, `Catatan Safety`
2. feature `#Task`,`Hari`, `Tanggal`, `Bulan`, `Tahun`,`Jam`, `Menit`, `Minggu`, `Hari Dalam Minggu`, `NPK Pelapor`,`NPK PIC`, `NPK Safety Evaluator`,`Foto Laporan` tidak diperlukan. 

"""

#drop unnecessary features
df.drop(['#Task','Hari', 'Tanggal', 'Bulan', 'Tahun','Jam', 'Menit', 'Minggu',
              'Hari Dalam Minggu' ,'NPK Pelapor','NPK PIC', 'Golden Rule',
              'NPK Safety Evaluator','Catatan Verifikasi','Catatan Pelapor', 
              'Catatan PIC', 'Catatan Safety', 'Foto Laporan'], inplace = True , axis = 1)

#handling missing value
df['Departemen Pelapor'] = df['Departemen Pelapor'].fillna('')
df['Ketidaksesuaian'] = df['Ketidaksesuaian'].fillna('')

df['Ketidaksesuaian']

# Get value counts for 'Sumber Data'
value_counts = df['Sumber Data'].value_counts()

# Define labels and sizes for the pie chart
my_labels = value_counts.index.tolist()
sizes = value_counts.tolist()

# Define colors using a viridis colormap
colors = plt.cm.viridis(np.linspace(0, 1, len(my_labels)))

# Define explode parameter for the pie chart
my_explode = [0.05, 0.05]

# Create the pie chart
plt.figure(figsize=(12, 8))
plt.pie(sizes, labels=my_labels, autopct='%1.1f%%',pctdistance=0.85, startangle=90, colors=colors, 
        explode=my_explode, textprops={'fontsize': 20, 'color': 'white'})
# draw circle
centre_circle = plt.Circle((0, 0), 0.70, fc='white')
fig = plt.gcf()
  
# Adding Circle in Pie chart
fig.gca().add_artist(centre_circle)

plt.title('Sumber Data', fontsize=17)
plt.axis('equal')
plt.legend()
plt.show()
plt.savefig('sumber_data.png')

plt.savefig('sumber_data.png')



df.head()

"""data pada feature `Tanggal Pembuatan` dengan format datetime diganti ke date sehingga lebih gampang untuk dianalisis"""

import datetime
# convert the datetime column to a datetime type
df['Tanggal Pembuatan']= pd.to_datetime(df['Tanggal Pembuatan'])

#cobver the datetime column to a datetime type 
df['Tanggal Pembuatan'] = df['Tanggal Pembuatan'].dt.date

df.head()

df.info()

"""## Exploratory Data Analysis

### Tren Departemen Pelapor 

Dengan menganalisis jumlah laporan yang dibuat oleh departemen tertentu dan tingkat keterlibatan masing-masing departermen dalam pelaporan insiden atau ketidaksesuaian. Hal ini berguna untuk mengevaluasi efektivitas program keselamatan dan kebijakan perusahaan
"""

string_cols = df.select_dtypes(include=['object']).columns
df[string_cols] = df[string_cols].apply(lambda x: x.str.lower() if isinstance(x.iloc[0], str) else x)

df.head()

unique_sumber_data= df['Sumber Data'].nunique()
unique_jabatan_pelapor = df['Jabatan Fungsional Pelapor'].nunique()
unique_dept_pelapor = df['Departemen Pelapor'].nunique()
unique_jab_pic = df['Jabatan Fungsional PIC'].nunique()
unique_dept_pic = df['Departemen PIC'].nunique()
unique_lokasi = df['Lokasi'].nunique()
unique_kategori = df['Kategori'].nunique()
unique_ketidaksesuaian = df['Ketidaksesuaian'].nunique()
unique_tipe_tindakan = df['Tipe Tindakan'].nunique()
unique_akar_permasalahan = df['Akar Permasalahan'].nunique()
unique_tindakan = df['Tindakan'].nunique()
unique_perusahaan = df['Perusahaan Safety Evaluator'].nunique()
unique_evaluator= df['Nama Evaluator Car'].nunique()
unique_dept_evaluator = df['Departemen Safety Evaluator'].nunique()
unique_kekerapan = df['Kekerapan'].nunique()
unique_resiko= df['Nilai Resiko'].nunique()
unique_status = df['Status'].nunique()

print('Count the unique each features')
print('-------------------------------')
print('Sumber Data : ', unique_sumber_data)
print('Jabatan Fungsional Pelapor: ', unique_jabatan_pelapor)
print('Departemen Pelapor: ', unique_dept_pelapor)
print('Jabatan Fungsional PIC: ', unique_jab_pic )
print('Departemen PIC: ', unique_dept_pic )
print('Lokasi: ', unique_lokasi )
print('Kategori: ', unique_kategori )
print('Ketidaksesuaian: ', unique_ketidaksesuaian )
print('Tipe Tindakan: ', unique_tipe_tindakan )
print('Akar Permasalahan: ', unique_akar_permasalahan )
print('Tindakan: ', unique_tindakan )
print('Perusahaan Safety Evaluator: ', unique_perusahaan )
print('Nama Evaluator Car:', unique_evaluator)
print('Departemen Safety Evaluator: ',unique_dept_evaluator )
print('Kekerapan: ', unique_kekerapan )
print('Nilai Resiko: ', unique_resiko)
print('Status: ', unique_status)

"""### Report Per Departemen PIC"""

# table 
dept_grp = df.groupby('Departemen PIC').size().reset_index()
dept_grp.columns = ['target', 'total']
dept_grp['%'] = round(dept_grp['total']*100/sum(dept_grp['total'],2))
dept_grp.sort_values(by='total', ascending = False).style.background_gradient(cmap='Greens')

"""More than one name for one department 

1. `safety, health, & environment` , `safety health and environmental` , `safety, health , & environment` , `safety health and environmental`, `she`,`she departement`, `safety, health & environment`, `environment department	`
2. `operation` , `operation department`, `bc it operation department`, `port & barging operation department	`, `safety operation department`
3. `service`,`service departmen`, `emergency responses & safety services department` , `service departement`, `general services department`, `general service departemen`, `gs`,`general service` , `service`
4. `plant` , `plant departement`, 
5. `maintenace` , `asset & facility infrastructure maintenance department`, `maintenance departement`, `plant & maintenance` , `road maintenance`, `maintenace`
6. `logistic`,`logistic department` , `logistic departement`
"""

# Cleaning departmen
# define the list of values to replace
safety_replace = ['safety health and environmental', 'safety, health , & environment', 'safety health and environmental', 'she', 'she departement', 'safety, health & environment','environment department']
operation_replace =['operation department', 'bc it operation department', 'port & barging operation department', 'safety operation department']
service_replace =['service departmen', 'emergency responses & safety services department' , 'service departement', 'general services department', 'general service departemen', 'gs','general service',
                  'general service departement', 'general services departement', ' gs', ' gs ']
plant_replace = ['plant departement']
maintenace_replace =['asset & facility infrastructure maintenance department', 'maintenance departement', 'plant & maintenance' , 'road maintenance','maintenance']
logistic_replace = ['logistic department' , 'logistic departement']

# replace the values in the "Departemen PIC" 
df["Departemen PIC"] = df["Departemen PIC"].replace(safety_replace, 'safety, health, & environment')
df["Departemen PIC"] = df["Departemen PIC"].replace(operation_replace, 'operation')
df["Departemen PIC"] = df["Departemen PIC"].replace(service_replace, 'service')
df["Departemen PIC"] = df["Departemen PIC"].replace(plant_replace, 'plant')
df["Departemen PIC"] = df["Departemen PIC"].replace(maintenace_replace, 'maintenace')
df["Departemen PIC"] = df["Departemen PIC"].replace(logistic_replace, 'logistic')

# visualization
sns.set_style('whitegrid')
fig = plt.figure(figsize = (30,15))
grp = df['Departemen PIC'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#440154', width = 0.8)
plt.title('Proportion of Reports per Department Reporter\n', fontsize = 14)
plt.ylabel('Departement Reporter')
plt.xlabel('Count of Reporters')
plt.show()

# visualization
sns.set_style('whitegrid')
fig = plt.figure(figsize = (12,7))
grp = df['Departemen Pelapor'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#1fa187', width = 0.8)
plt.title('Proportion of Reports per Department Reporter\n', fontsize = 14)
plt.ylabel('Departement Reporter')
plt.xlabel('Count of Reporters')
plt.show()

"""### Report Per Location"""

# table 
lokasi_grp = df.groupby('Lokasi').size().reset_index()
lokasi_grp.columns = ['target', 'total']
lokasi_grp['%'] = round(lokasi_grp['total']*100/sum(lokasi_grp['total'],2))
lokasi_grp.sort_values(by='total', ascending = False).style.background_gradient(cmap='Greens')

# visualization
sns.set_style('whitegrid')
fig = plt.figure(figsize = (12,7))
grp = df['Lokasi'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#1fa187', width = 0.8)
plt.title('Proportion of Reports per Location\n', fontsize = 14)
plt.ylabel('Location')
plt.xlabel('Count of Reporters')
plt.show()

"""### Report Per Category

"""

plt.figure(figsize=(12,8))

#Extract feature data
kategori = df['Kategori']

# Count the number of occurrences for each unique value
value_counts =kategori.value_counts()

# Get labels and size
my_labels = value_counts.index.tolist()
sizes = value_counts.tolist()

my_colors = ['#1fa187','#6ece58', '#fde725']
my_explode = (0, 0, 0.1)
plt.pie(value_counts, labels=my_labels, autopct='%1.1f%%', startangle=90, shadow = False, colors=my_colors, explode=my_explode, textprops={'fontsize': 10})
plt.title('Kategori', fontsize=20)
plt.axis('equal')
plt.legend()
plt.show()



"""### Perusahaan Safety Evaluator"""

# table 
perusahaan_grp = df.groupby('Perusahaan Safety Evaluator').size().reset_index()
perusahaan_grp.columns = ['target', 'total']
perusahaan_grp['%'] = round(perusahaan_grp['total']*100/sum(perusahaan_grp['total'],2))
perusahaan_grp.sort_values(by='total', ascending = False).style.background_gradient(cmap='Greens')

# visualization
sns.set_style('whitegrid')
fig = plt.figure(figsize = (12,7))
grp = df['Perusahaan Safety Evaluator'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#1fa187', width = 0.8)
plt.title('Proportion of Reports per Perusahaan Safety Evaluator\n', fontsize = 14)
plt.ylabel('Perusahaan Safety Evaluator')
plt.xlabel('Count of Reporters')
plt.show()

"""### Status

"""

# table 
status_grp = df.groupby('Status').size().reset_index()
status_grp.columns = ['target', 'total']
status_grp['%'] = round(status_grp['total']*100/sum(status_grp['total'],2))
status_grp.sort_values(by='total', ascending = False).style.background_gradient(cmap='Greens')

# visualization
sns.set_style('whitegrid')
fig = plt.figure(figsize = (12,7))
grp = df['Status'].value_counts().sort_values(ascending = True)
grp.plot(kind='barh', color ='#1fa187', width = 0.8)
plt.title('Proportion of Reports per Status\n', fontsize = 14)
plt.ylabel('Status')
plt.xlabel('Count of Reporters')
plt.show()

"""## Distribusi Ketidaksesuaian Masing-Masing Departemen Pelapor

**1. Ketidaksesuaian vs Departemen Pelapor (operation)**
"""

operation = df[df['Departemen Pelapor']=='operation']
title_operation = ' '.join(operation['Ketidaksesuaian'].tolist())

word_cloud1 = WordCloud(collocations = False, background_color = 'white',
                        width = 2048, height = 1080, colormap='Set2').generate(title_operation)

plt.figure(figsize = (12, 12))
plt.imshow(word_cloud1, interpolation='bilinear')
plt.axis("off")
plt.show()

""" **2. Ketidaksesuaian vs Departemen Pelapor (plant)**"""

plant = df[df['Departemen Pelapor']=='plant']
title_plant = ' '.join(operation['Ketidaksesuaian'].tolist())

word_cloud1 = WordCloud(collocations = False, background_color = 'white',
                        width = 2048, height = 1080, colormap='Set2').generate(title_plant)

plt.figure(figsize = (12, 12))
plt.imshow(word_cloud1, interpolation='bilinear')
plt.axis("off")
plt.show()

for departemen in df['Departemen Pelapor'].unique():
    data_departemen = df[df['Departemen Pelapor'] == operation]
    text = ' '.join(str(x) for x in data_departemen['Ketidaksesuaian'].tolist())
    wordcloud = WordCloud(width=800, height=400, background_color='white', max_words=100, contour_width=3, contour_color='steelblue')
    wordcloud.generate(text)

    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(departemen)
    plt.show()

for departemen in df['Departemen Pelapor'].unique():
    data_departemen = df[df['Departemen Pelapor'] == departemen].dropna(subset=['Ketidaksesuaian'])
    if not data_departemen.empty:
        text = ' '.join(str(x) for x in data_departemen['Ketidaksesuaian'].tolist())
        wordcloud = WordCloud(width=800, height=400, background_color='white', max_words=100, contour_width=3, contour_color='steelblue')
        wordcloud.generate(text)

        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis('off')
        plt.title(departemen)
        plt.show()

"""## Report Masing-masing Departemen pelapor per bulan

#gabungain grafiknya
"""

# Group by departemen and count the number of entries
dept_grp = df.groupby('Departemen Pelapor').size().reset_index()
dept_list = dept_grp['Departemen Pelapor'].tolist()

# Create one figure and one axis for all the plots
fig, ax = plt.subplots(figsize=(20, 10))

# Loop through each department and create a report per month
for i, dept in enumerate(dept_list):
    # Subset the data for the current department
    dept_data = df[df['Departemen Pelapor'] == dept]
    # Change format data 'Tanggal Pembuatan'
    dept_data['Tanggal Pembuatan'] = pd.to_datetime(dept_data['Tanggal Pembuatan'], format='%Y-%m-%d')
    # Group by month and count the number of entries
    grp = dept_data['Tanggal Pembuatan'].groupby(dept_data['Tanggal Pembuatan'].dt.to_period("M")).agg('count').reset_index(name='count')
    grp.rename(columns={'Tanggal Pembuatan': 'month'}, inplace=True)
    grp['month'] = grp['month'].astype(str)
    # Plot the report per month for the current department on the same axis
    sns.lineplot(x="month", y="count", data=grp, ax=ax, linewidth=2, label=dept)

# Set the title and legend for the figure
plt.title("Report Per Month by Department")
plt.legend(title='Department', loc='upper left')

# Show the figure
plt.show()

# Create a new column for the year
df['year'] = df['Tanggal Pembuatan'].dt.year

# Group by department, year, and month, and count the number of entries
grp = df.groupby(['Departemen Pelapor', 'year', df['Tanggal Pembuatan'].dt.to_period("M")])['Tanggal Pembuatan'].count().reset_index(name='count')

# Convert month to string
grp['Tanggal Pembuatan'] = grp['Tanggal Pembuatan'].astype(str)

# Plot the report per month for each department and year
sns.relplot(x="Tanggal Pembuatan", y="count", data=grp, hue='year', style='Departemen Pelapor', kind="line", height=5, aspect=5)
plt.title("Report Per Month")
plt.show()

"""### Evaluation of of Tanggal Pembuatan, Due Date penyelesaian dan Tanggal actual penyelesaian"""

# Convert date columns to datetime format
df['Tanggal Pembuatan'] = pd.to_datetime(df['Tanggal Pembuatan'])
df['Due Date Penyelesaian'] = pd.to_datetime(df['Due Date Penyelesaian'])
df['Tanggal Aktual Penyelesaian'] = pd.to_datetime(df['Tanggal Aktual Penyelesaian'])

# Calculate the counts for each feature per month
monthly_counts = df.groupby(pd.Grouper(key='Tanggal Pembuatan', freq='M'))[['Due Date Penyelesaian', 'Tanggal Aktual Penyelesaian']].count()

# Create a line chart with the monthly counts for each feature
plt.plot(monthly_counts.index, monthly_counts['Due Date Penyelesaian'], label='Due Date Penyelesaian')
plt.plot(monthly_counts.index, monthly_counts['Tanggal Aktual Penyelesaian'], label='Tanggal Aktual Penyelesaian')
plt.plot(monthly_counts.index, df.groupby(pd.Grouper(key='Tanggal Pembuatan', freq='M')).size(), label='Tanggal Pembuatan')

# Set the chart title and axis labels
plt.title('Counts by Month')
plt.xlabel('Month')
plt.ylabel('Count')

# Set the color map to 'viridis'
plt.set_cmap('viridis')

# Add a legend and show the plot
plt.legend()
plt.show()